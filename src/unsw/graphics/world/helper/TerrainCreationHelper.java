package unsw.graphics.world.helper;

import java.util.ArrayList;

import unsw.graphics.Vector3;
import unsw.graphics.geometry.Point3D;

public class TerrainCreationHelper {

	//component wise product of two perpendicular bezier polynomials over 0,1
	//additional control points are found by the gradient generated by adjacent points
	//(p3-p1)/2 if endpoints exist, or just the gradient of the slope
	
	/**
	 * assume x,z are within the grid otherwise will fail
	 * @param x
	 * @param z
	 * @param altitudes
	 */
	public void generateControlPoints(int x, int z, float[][] altitudes){
		
		float x_mod = x % 1;
		float z_mod = z % 1;
		
		int x_int = (int) x;
		int z_int = (int) z;
	
		Point3D p00 = new Point3D(x_int, altitudes[x][z], z_int);
		Point3D p10 = new Point3D(x_int+1, altitudes[x+1][z], z_int);
		Point3D p01 = new Point3D(x_int, altitudes[x][z+1], z_int+1);
		Point3D p11 = new Point3D(x_int+1, altitudes[x][z], z_int+1);
		
	}
	
	public void generateXGradient(int x, int z, float[][] altitudes){
		int x_int = (int) x;
		int z_int = (int) z;
		
		Point3D p11 = new Point3D(x_int, altitudes[x][z], z_int);
		Point3D p21 = new Point3D(x_int+1, altitudes[x+1][z], z_int);
		Point3D p12 = new Point3D(x_int, altitudes[x][z+1], z_int+1);
		Point3D p22 = new Point3D(x_int+1, altitudes[x][z], z_int+1);
	
		Vector3 m1x; 
		Vector3 m2x; 
		Vector3 m1z;
		Vector3 m2z; 
		
		Point3D mx00;
		Point3D mx01;
		Point3D mx10;
		Point3D mx11;
		//m1x
		try {
			mx00 = new Point3D(x_int-1, altitudes[x-1][z], z_int); 
		}
		catch(ArrayIndexOutOfBoundsException e){
			mx00 = p11;
		}
		try {
			mx01 = new Point3D(x_int-1, altitudes[x-1][z+1], z_int+1); 
		}
		catch(ArrayIndexOutOfBoundsException e){
			mx01 = p11;
		}

	}
	
	public void generateZGradient(){
		
		
	}
	
}
